#include "Vector.h"
#include "../engine/Math.h"

/************************************************************************************
	Vec2
*************************************************************************************/

//-------------------------------------------------------------------
//	Cdtor
//-------------------------------------------------------------------
math::Vec2::Vec2() : Vec2(0.0f, 0.0f)
{
}
//-------------------------------------------------------------------
math::Vec2::Vec2(float xy) : Vec2(xy, xy)
{
}
//-------------------------------------------------------------------
math::Vec2::Vec2(float _x, float _y) : x(_x), y(_y)
{
}
//-------------------------------------------------------------------
//	Cdtor
//-------------------------------------------------------------------
math::Vec3 math::Vec2::Xyz(float z)const
{
	return math::Vec3( x, y, z );
}
//-------------------------------------------------------------------
//	operator -
//-------------------------------------------------------------------
math::Vec2 math::Vec2::operator-()const
{
	Vec2 result = *this;

	result.x *= -1.0f;
	result.y *= -1.0f;

	return result;
}
//-------------------------------------------------------------------
//	operator +=
//-------------------------------------------------------------------
math::Vec2& math::Vec2::operator+=(const Vec2& v)
{
	x += v.x;
	y += v.y;

	return *this;
}
//-------------------------------------------------------------------
//	operator -=
//-------------------------------------------------------------------
math::Vec2& math::Vec2::operator-=(const Vec2& v)
{
	x -= v.x;
	y -= v.y;

	return *this;
}
//-------------------------------------------------------------------
//	operator *=
//-------------------------------------------------------------------
math::Vec2& math::Vec2::operator*=(float value)
{
	x *= value;
	y *= value;

	return *this;
}

//-------------------------------------------------------------------
//	operator[]
//-------------------------------------------------------------------
float& math::Vec2::operator[](uint index)
{
	return (&x)[index];
}
//-------------------------------------------------------------------
const float& math::Vec2::operator[](uint index)const
{
	return (&x)[index];
}

/************************************************************************************
	Vec3
*************************************************************************************/

const math::Vec3 math::Vec3::zero = math::Vec3(0.0f);

//-------------------------------------------------------------------
//	Cdtor
//-------------------------------------------------------------------
math::Vec3::Vec3() : Vec3(0.0f, 0.0f, 0.0f)
{
}
//-------------------------------------------------------------------
math::Vec3::Vec3(float xyz) : Vec3(xyz, xyz, xyz)
{
}
//-------------------------------------------------------------------
math::Vec3::Vec3(const Vec2& v, float _z) : Vec3(v.x, v.y, _z)
{
}
//-------------------------------------------------------------------
math::Vec3::Vec3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) 
{
}
//-------------------------------------------------------------------
//	Xy
//-------------------------------------------------------------------
math::Vec2 math::Vec3::Xy()const
{
	return Vec2( x, y );
}
//-------------------------------------------------------------------
//	Xyzw
//-------------------------------------------------------------------
math::Vec4 math::Vec3::Xyzw(float w)const
{
	return Vec4( x, y, z, w );
}
//-------------------------------------------------------------------
//	Abs
//-------------------------------------------------------------------
math::Vec3 math::Vec3::Abs()const
{
	math::Vec3 result = *this;

	result.x = abs(x);
	result.y = abs(y);
	result.z = abs(z);

	return result;
}
//-------------------------------------------------------------------
//	Inv
//-------------------------------------------------------------------
math::Vec3 math::Vec3::Inv()const
{
	return Vec3(
		1.0f / x,
		1.0f / y,
		1.0f / z
	);
}
//-------------------------------------------------------------------
//	operator -
//-------------------------------------------------------------------
math::Vec3 math::Vec3::operator-()const
{
	Vec3 result = *this;

	result.x = -result.x;
	result.y = -result.y;
	result.z = -result.z;

	return result;
}
//-------------------------------------------------------------------
//	operator -=
//-------------------------------------------------------------------
math::Vec3& math::Vec3::operator-=(const Vec3& v)
{
	x -= v.x;
	y -= v.y;
	z -= v.z;

	return *this;
}
//-------------------------------------------------------------------
//	operator +=
//-------------------------------------------------------------------
math::Vec3& math::Vec3::operator+=(const Vec3& v)
{
	x += v.x;
	y += v.y;
	z += v.z;

	return *this;
}
//-------------------------------------------------------------------
//	operator *=
//-------------------------------------------------------------------
math::Vec3& math::Vec3::operator*=(float value)
{
	x *= value;
	y *= value;
	z *= value;

	return *this;
}
//-------------------------------------------------------------------
//	operator /=
//-------------------------------------------------------------------
math::Vec3& math::Vec3::operator/=(float value)
{
	x /= value;
	y /= value;
	z /= value;

	return *this;
}
//-------------------------------------------------------------------
//	operator[]
// NOTE: Can I do this? Looks very, very wrong -.- but works ^^
//-------------------------------------------------------------------
float& math::Vec3::operator[](uint index)
{
	return (&x)[index];
}
//-------------------------------------------------------------------
const float& math::Vec3::operator[](uint index)const
{
	return (&x)[index];
}


/************************************************************************************
	Vec4
*************************************************************************************/

const math::Vec4 math::Vec4::zero = math::Vec4(0.0f);

//-------------------------------------------------------------------
//	Cdtor
//-------------------------------------------------------------------
math::Vec4::Vec4() : Vec4(0.0f, 0.0f, 0.0f, 0.0f)
{
}
//-------------------------------------------------------------------
math::Vec4::Vec4(float xyzw) : Vec4(xyzw, xyzw, xyzw, xyzw)
{
}
//-------------------------------------------------------------------
math::Vec4::Vec4(float _x, float _y, float _z, float _w) : x(_x), y(_y), z(_z), w(_w) 
{
}
//-------------------------------------------------------------------
math::Vec4::Vec4(const math::Vec3& v, float _w) : x(v.x), y(v.y), z(v.z), w(_w)
{
}
//-------------------------------------------------------------------
//	Xy
//-------------------------------------------------------------------
math::Vec2 math::Vec4::Xy()const
{
	return math::Vec2( x, y );
}
//-------------------------------------------------------------------
//	Xyz
//-------------------------------------------------------------------
math::Vec3 math::Vec4::Xyz()const
{
	return math::Vec3( x, y, z );
}
//-------------------------------------------------------------------
//	operator +=
//-------------------------------------------------------------------
math::Vec4& math::Vec4::operator+=(const Vec4& v)
{
	x += v.x;
	y += v.y;
	z += v.z;
	w += v.w;

	return *this;
}
//-------------------------------------------------------------------
//	operator *=
//-------------------------------------------------------------------
math::Vec4& math::Vec4::operator*=(float f)
{
	*this = *this * f;

	return *this;
}
//-------------------------------------------------------------------
//	operator[]
//-------------------------------------------------------------------
float& math::Vec4::operator[](uint index)
{
	return (&x)[index];
}
//-------------------------------------------------------------------
const float& math::Vec4::operator[](uint index)const
{
	return (&x)[index];
}

/************************************************************************************
	HELPER FUNCTIONS
*************************************************************************************/

//=========================================================================
//	Vec2 helper function
//=========================================================================

//-------------------------------------------------------------------
//	operator *
//-------------------------------------------------------------------
math::Vec2 math::operator*(const math::Vec2& u, float f)
{
	return math::Vec2( 
		u.x * f,
		u.y * f );
}
//-------------------------------------------------------------------
float math::operator*(const math::Vec2& u, const math::Vec2& v)
{
	return v.x * u.x + v.y * u.y;
}
//-------------------------------------------------------------------
//	operator /
//-------------------------------------------------------------------
math::Vec2 math::operator/(const math::Vec2& u, float f)
{
	return math::Vec2( u.x / f, u.y / f );
}
//-------------------------------------------------------------------
//	operator +
//-------------------------------------------------------------------
math::Vec2 math::operator+(const math::Vec2& u, const math::Vec2& v)
{
	return math::Vec2( 
		u.x + v.x,
		u.y + v.y );
}
//-------------------------------------------------------------------
//	operator -
//-------------------------------------------------------------------
math::Vec2 math::operator-(const math::Vec2& u, const math::Vec2& v)
{
	return math::Vec2( 
		u.x - v.x,
		u.y - v.y );
}

//=============================================================================
//	Vec3 helper function
//=============================================================================

//-------------------------------------------------------------------
//	operator *
//-------------------------------------------------------------------
math::Vec3 math::operator*(const math::Vec3& v, float f)
{
	return math::Vec3( 
		v.x * f, 
		v.y * f, 
		v.z * f );
}
//-------------------------------------------------------------------
math::Vec3 math::operator*(float f, const math::Vec3& v)
{
	return v * f;
}
//-------------------------------------------------------------------
float math::operator*(const math::Vec3& v1, const math::Vec3& v2)
{
	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}
//-------------------------------------------------------------------
//	operator /
//-------------------------------------------------------------------
math::Vec3 math::operator/(const math::Vec3& v, float f)
{
	return math::Vec3(
		v.x / f,
		v.y / f,
		v.z / f
	);
}
//-------------------------------------------------------------------
//	operator +
//-------------------------------------------------------------------
math::Vec3 math::operator+(const Vec3& v1, const Vec3& v2)
{
	return math::Vec3(
		v1.x + v2.x,
		v1.y + v2.y,
		v1.z + v2.z
	);
}
//-------------------------------------------------------------------
//	operator -
//-------------------------------------------------------------------
math::Vec3 math::operator-(const Vec3& v1, const Vec3& v2)
{
	return math::Vec3(
		v1.x - v2.x,
		v1.y - v2.y,
		v1.z - v2.z
	);
}

//=============================================================================
//	Vec4 helper function
//=============================================================================

//-------------------------------------------------------------------
//	operator *
//-------------------------------------------------------------------
math::Vec4 math::operator*(const math::Vec4& v, float f)
{
	return math::Vec4( 
		v.x * f, 
		v.y * f, 
		v.z * f, 
		v.w * f );
}
//-------------------------------------------------------------------
math::Vec4 math::operator*(float f, const math::Vec4& v)
{
	return v * f;
}
//-------------------------------------------------------------------
//	operator /
//-------------------------------------------------------------------
math::Vec4 math::operator/(const math::Vec4& v, float f)
{
	return math::Vec4(
		v.x / f,
		v.y / f,
		v.z / f,
		v.w / f
	);
}
//-------------------------------------------------------------------
//	operator +
//-------------------------------------------------------------------
math::Vec4 math::operator+(const Vec4& v1, const Vec4& v2)
{
	return math::Vec4(
		v1.x + v2.x,
		v1.y + v2.y,
		v1.z + v2.z,
		v1.w + v2.w
	);
}
//-------------------------------------------------------------------
//	operator -
//-------------------------------------------------------------------
math::Vec4 math::operator-(const Vec4& v1, const Vec4& v2)
{
	return math::Vec4(
		v1.x - v2.x,
		v1.y - v2.y,
		v1.z - v2.z,
		v1.w - v2.w
	);
}
